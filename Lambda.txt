Anonymous function 

lambda is key word in python

x=lambda a,b:a*b--------> returns value

lambda a,b=takes value

read lambda a,b as use a as a*b

The strip() method removes any leading (spaces at the beginning) and trailing (spaces at the end) characters (space is the default leading character to remove)


lambda x: 3*x+1
<function <lambda> at 0x0000023C881E7700>

Without assigning to variable lambda function return its address ,since everything in python is object,it has address and can be assigned to variable
lets assign to a variable s
s=lambda x: 3*x+1
38x+1 is return to s .s() will call lambda function which has x variable so s() will go as s(100)

fullname=lambda fn,ln:fn.strip().title()+ "" + ln.strip().title()
>>> fullname("  sumedh" ,"  srode")
'SumedhSrode'
>>> fullname=lambda fn,ln:fn.strip().title()+ " " + ln.strip().title()
>>> fullname("  sumedh" ,"  srode")
'Sumedh Srode'

Nested Lambda Function:
add=lambda 10:(lambda x:x+y)

1.First call the function by add()
2.Hold value of add() in a a
3.insert values in a(20) and print a(20)

#Passing Lambda Function to another Function in Python (Hindi) 

def show(a):
   print(a(8))

show(lambda x:x)

1. show is called by show(lambda x:x)
2.a variable now becomes function variable,now function variable can call the function lambda by adding parenthesis to it
3.8 is return to a and 8 is printed
4.This is how lambda function is pass to a function


#Returning Lambda Function from a Function in Python
def add():
y=20
   return lambda x:x+y
a =add()
a(30)

map Reduce Filter;
import math
def area(r):
    return math.pi*(r**2)

radii=[2,5,10,12.5]
a_list=[]
for r in radii:
       a_list.append(area(r))

a_list
[12.566370614359172, 78.53981633974483, 314.1592653589793, 490.8738521234052]


#map function:
list(map(area,radii))
[12.566370614359172, 78.53981633974483, 314.1592653589793, 490.8738521234052]

we have list and we have to apply function to each element in list we use map function:

celcius_to_temp=lambda data:(9/5)*data+32
>>> celcius_to_temp(45)
113.0


import math
def facto(n):
    fact=1
    for i in range(1,n+1):
        fact=fact*i
    return fact    

number_list=[2,3,4,5,6,7,8]
all_fact=[]
for r in number_list:
    value=facto(r)
    all_fact.append(value)


# Why brackets are important:
currency_convertor=lambda usd:usd*72,"Rs"
>>> currency_convertor(50)
Traceback (most recent call last):
  File "<pyshell#75>", line 1, in <module>
    currency_convertor(50)
TypeError: 'tuple' object is not callable  --------------->without bracket its not callable
>>> currency_convertor=lambda usd:(usd*72,"Rs") with bracket it becomes function and function is callble
>>> currency_convertor(950)
(68400, 'Rs')


==========================================================================================================

Filter()

data=[23.5,45.6,56.8,56,89]
>>> avg=statistics.mean(data)
>>> avg
54.18
list(filter(lambda x:x>avg,data))
[56.8, 56, 89]

names=["sumedh","sarode","sugar","don"]
>>> list(filter(lambda x:x.startswith("s"),names))
['sumedh', 'sarode', 'sugar']